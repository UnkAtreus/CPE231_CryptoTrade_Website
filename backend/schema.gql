# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: Float
  role: String
  user: [User!]
}

type Currency {
  id: Float
  currency: String
  currencyLongName: String
  volume: Float
  user: [User!]
  wallet: [Wallet!]
}

type Order {
  id: ID
  user: User
  method: String
  walletFrom: Wallet
  walletTo: Wallet
  price: Float
  amount: Float
  totalBalance: Float
  cancel: Boolean
  filled: Boolean
  created_at: DateTime
  tradeDateTime: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PtoP {
  id: Float
  walletFrom: Wallet
  walletTo: Wallet
  amount: Float
  walletFromBalance: Float
  walletToBalance: Float
}

type TransactionCrypto {
  id: ID
  user: User
  wallet: Wallet
  method: String
  status: String
  created_at: DateTime
  updated_at: DateTime
  amount: Float
  targetWallet: String
  totalBalanceLeft: Float
}

type Bank {
  id: Float
  bank: String
  transactionFiat: [TransactionFiat!]!
}

type CreditCard {
  id: ID
  user: User
  cardNumber: String
  expiredMonth: String
  expiredYear: String
  cvv: String
  address: String
  postCode: String
  city: String
  country: String
  transactionFiat: [TransactionFiat!]
}

type TransactionFiat {
  id: ID
  user: User
  bank: Bank
  status: String
  method: String
  wallet: Wallet
  creditCard: CreditCard
  created_at: DateTime
  updated_at: DateTime
  amount: Float
  bankNumber: String
  totalBalanceLeft: Float
}

type Wallet {
  id: Float
  amount: Float
  inOrder: Float
  currency: Currency
  order: [Order!]
  p2pFrom: [PtoP!]
  p2pTo: [PtoP!]
  transactionCrypto: [TransactionCrypto!]
  transactionFiat: [TransactionFiat!]
  user: User
}

type User {
  id: ID
  role: Role
  firstName: String
  lastName: String
  email: String
  phone: String
  nationality: String
  citizenID: String
  passportNumber: String
  birthDate: String
  gender: String
  address: String
  city: String
  postcode: String
  password: String
  pincode: String
  token: String
  verify: Boolean
  created_at: DateTime
  updated_at: DateTime
  wallet: [Wallet!]
  creditCard: [CreditCard!]
  transactionFiat: [TransactionFiat!]
}

type Query {
  getHello: String!
  getAllUser: [User!]!
  login(login: LoginInput!): String!
  getUserByToken: User!
  getAllWallet: [Wallet!]!
  getUserWalletByToken: [Wallet!]!
  getWalletById(id: ID!): Wallet!
  getAllCurrency: [Currency!]!
  getCurrencyId(id: ID!): Currency!
  getCurrencyByShortName(shortName: String!): Currency!
  getAllCurrencyWithNoStatic: [Currency!]!
  getAllCard: [CreditCard!]!
  getCardByID(idcardInput: Float!): CreditCard!
  getCardByToken: [CreditCard!]!
  getAllFiat: [TransactionFiat!]!
  getAllFiatByUser: [TransactionFiat!]!
  getAllCrypto: [TransactionCrypto!]!
  getAllCryptoByUser: [TransactionCrypto!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  registerUser(registerInput: RegisterInput!): String!
  seedUser: String!
  verifyUser(idInput: Float!): String!
  changePass(passInput: PassInput!): String!
  createCurrency(currencyShortName: String!, currencyName: String!): Currency!
  createAllCurrency: [Currency!]!
  deleteCurrency(id: ID!): String!
  updateCurrency(volume: Float, shortName: String, name: String, id: ID!): Currency!
  addCard(cardInput: CardInput!): CreditCard!
  updateCard(cardInput: CardInput!, id: Float!): CreditCard!
  deleteCard(id: Float!): CreditCard!
  testOrder2: String!
  createOrder(input: OrderInput!): Order!
  cancelOrder(id: ID!): Order!
  createFiat(fiatInput: FiatInput!): TransactionFiat!
  updateFiatStatus(id: ID!, status: Float!): TransactionFiat!
  createTransCrypto(cryptoInput: CryptoInput!): TransactionCrypto!
  updateCryptoStatus(id: ID!, status: Float!): TransactionCrypto!
  createP2P(p2pInput: PtoPInput!): PtoP!
}

input RegisterInput {
  email: String!
  password: String!
  profileInput: ProfileInput!
}

input ProfileInput {
  firstName: String
  lastName: String
  phone: String
  nationality: String
  citizenID: String
  passportNumber: String
  birthDate: DateTime
  gender: Float
  address: String
  city: String
  postcode: String
}

input PassInput {
  oldPass: String
  newPass: String
}

input CardInput {
  cardNumber: String
  expiredMonth: String
  expiredYear: String
  cvv: String
  address: String
  postcode: String
  city: String
  country: String
}

input OrderInput {
  method: Float!
  currenyIDFrom: ID!
  currenyIDTo: ID!
  price: Float!
  amount: Float!
}

input FiatInput {
  method: Float
  amount: Float
  bankNumber: String
}

input CryptoInput {
  method: Float
  amount: Float
  targetWallet: String
  shortName: String
}

input PtoPInput {
  amount: Float
  targetUser: Float
  currency: String
}

type Subscription {
  testOrder: String!
}
